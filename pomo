#!/usr/bin/env bash
# pomo
# bash 4+ pls

# much code lifted from dylanaraps' fff
# and lots of their pure-bash-bible

VERSION="0.2.0"
CONFDIR="~/.config/pomo/pomo.conf"

# default config
work_time=1500
break_time=300
long_break_time=1800
work_time_cycle=4
s=("working" "short break" "lengthy break" "stopped")

load_config () {
	CONFDIR="${CONFDIR/#\~/$HOME}"
	if test -f ${CONFDIR}; then
		. ${CONFDIR}
	fi
}

get_term_size () {
	read -r LINES COLUMNS < <(stty size)
}

setup_terminal () {
	# set up the terminal for the TUI
	# \e[?1049h  use alternative screen buffer
	# \e[?7l     disable line wrapping
	# \e[?25l    hide the cursor
	# \e[2J      clear the screen
	# \e[1;Nr    limit scrolling to scrolling area
	#            also sets cursor to (0,0)
	printf '\e[?1049h\e[?7l\e[?25l\e[2J\e[1;%sr' "$max_items"

	# hide echoing of user input
	stty -echo
}

reset_terminal () {
	# reset the terminal to a useable state (undo all changes)
	# \e[?7h     re-enable line wrapping
	# \e[?25h    unhide the cursor
	# \e[2J      clear the terminal
	# \e[;r      set the scroll region to its default value
	#            also sets cursor to (0,0)
	# \e[?1049l  restore main screen buffer
	printf '\e[?7h\e[?25h\e[2J\e[;r\e[?1049l'

	# show user input
	stty echo
}

clear_screen () {
	# only clear the scrolling window (dir item list)
	# \e[%sH    move cursor to bottom of scroll area
	# \e[9999C  move cursor to right edge of the terminal
	# \e[1J     clear screen to top left corner (from cursor up)
	# \e[2J     clear screen fully (if using tmux) (fixes clear issues)
	# \e[1;%sr  clearing the screen resets the scroll region(?) Reset it
	#           also sets cursor to (0,0).
	printf '\e[%sH\e[9999C\e[1J%b\e[1;%sr' \
		   "$((LINES-2))" "${TMUX:+\e[2J}" "$max_items"
}

redraw () {
	clear_screen

	local ty="$((LINES/2))"
	local tx="$((COLUMNS/2))"
	local tw="${#s[$mode]}"

	# print time
	printf "\u001b[%sm\e[%sH\e[%sC%02d:%02d\n" \
		   "$timer_col" \
		   "$ty" "$[tx-2]" \
		   "$[timer/60]" "$[timer%60]"

	# print mode
	printf "\u001b[%sm\e[%sH\e[%sC%s\n" \
		   "$text_col" \
		   "$[ty+1]" "$[tx-tw/2]" \
		   "${s[$mode]}"
}

keypress () {
	# check for key events
	if ((mode<2)); then
		read -t 1 -n 1 key
	else
		read -n 1 key
	fi

	# parse key events
	# @incomplete replace with switch
	case $key in
		${key_quit:="q"})
			exit
		;;

		${key_pause:="p"})
			# toggle between modes
			[ $mode = 3 ] && mode=0 || mode=3
		;;
	esac
}

display_help () {
	echo ""
	echo "    pomo "${VERSION}
	echo ""
	echo "    ARGUMENTS"
	echo "    -c  --config   opens config in "${EDITOR}
	echo "    -v  --version  shows pomo version"
	echo "    -h  --help     shows this screen"
	echo ""
	# echo "    KEYBINDINGS"
	# echo "    q  quit"
	# echo "    p  pause"
	# echo "    r  restart current stretch"
	# echo ""
}

main () {
	# open conf with -c
	[ "$1" = -c ] || [ "$1" = --config ] && {
		${EDITOR} ${CONFDIR}
		exit
	}

	# print version with -v
	[ "$1" = -v ] || [ "$1" = --version ] && {
		echo "pomo "${VERSION}
		exit
	}

	# print help with -h
	[ "$1" = -h ] || [ "$1" = --help ] && {
		display_help
		exit
	}

	# trap exit signal with a reset
	trap 'reset_terminal' EXIT

	# trap window resize
	trap 'get_term_size; redraw' WINCH

	load_config
	get_term_size
	setup_terminal

	# init timer
	timer=$work_time
	counter=$work_time_cycle
	mode=0

	while true
	do
		# exit if terminal is killed
		[[ -t 1 ]] || exit 1

		redraw

		timer=$[timer-1]

		if ((timer<0)); then
			if ((mode==0)); then
				counter=$[counter-1]

				if ((counter==0)); then
					counter=$work_time_cycle
					timer=$long_break_time
					mode=2
				else
					timer=$break_time
					mode=1
				fi
			else
				timer=$work_time
				mode=0
			fi
		fi

		sleep 1
	done
}

main "$@"
