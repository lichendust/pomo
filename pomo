#!/usr/bin/env python3

import time
import math
import curses
import datetime
from os.path import expanduser

# defaults
s = {
	"work_time":       1500, # 25 min
	"break_time":      300,  # 5 min
	"long_break_time": 1800, # 30 min
	"work_time_cycle": 4,    # 4 x work + short break sessions before long break
	"working": "working",
	"short":   "short break",
	"long":    "lengthy break",
	"pause":   "stopped"
}

conf_path = expanduser('~/.config/pomo/pomo.conf')

def toint(val):
	try:
		return int(val)
	except ValueError:
		return val

def load_config():
	conf = open(conf_path)

	for line in conf.readlines():
		list = line.split(' ',1)
		key  = list[0]
		val  = toint(list[1].strip())

		s[key] = val


class timer(object):
	def __init__(self, stdscr):
		self.scr     = stdscr
		self.exit    = False

		# use 1/10 for responsive input
		self.time_step = .1

		load_config()

		self.full_reset()

	def full_reset(self):
		self.running = True
		self.current_second = 1
		self.timer   = s["work_time"]
		self.cycles  = s["work_time_cycle"]
		self.mode   = "working"

	def soft_reset(self):
		self.running = True
		self.current_second = 1
		self.timer  = s["work_time"]
		self.mode   = "working"

	def run(self):
		while not self.exit:
			c = self.scr.getch()
			curses.flushinp()

			# input handler
			if   c == ord('q'):
				self.exit = True
			elif c == ord(' '):
				self.running = not self.running
			elif c == ord('r'):
				# restart current work time
				self.soft_reset()

			# timer
			if self.running:
				self.current_second -= self.time_step

				if self.current_second <= 0:
					self.current_second = 1
					self.timer -= 1

				if self.timer < 0:
					if self.mode == "working":
						if self.cycles == 1:
							self.timer  = s["long_break_time"]
							self.mode   = "long"
							self.cycles = s["work_time_cycle"]
						else:
							self.timer  = s["break_time"]
							self.mode   = "short"
							self.cycles -= 1

					else:
						self.timer = s["work_time"]
						self.mode  = "working"

			# draw screen
			self.render()
			time.sleep(self.time_step)

	def render(self):
		self.scr.clear()

		w = self.scr.getmaxyx()[1]
		h = self.scr.getmaxyx()[0]

		y = math.floor(h/2)
		x = math.floor(w/2-3)

		text = ''

		if self.running:
			text = s[self.mode]
		else:
			text = s["pause"]

		tx = math.floor(w/2-len(text)/2)

		minute, second = divmod(self.timer, 60)

		display = "%02d:%02d" % (minute, second)

		self.scr.addstr(y-1, x,  display)
		self.scr.addstr(y, tx, text, curses.color_pair(1))

def init(stdscr):
	stdscr = curses.initscr()

	curses.noecho()
	curses.cbreak()
	curses.curs_set(0)

	stdscr.nodelay(True)
	stdscr.keypad(True)

	curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)

	pomo = timer(stdscr)
	pomo.run()

if __name__ == '__main__':
	curses.wrapper(init)